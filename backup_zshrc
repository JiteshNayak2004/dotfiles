# Enable Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Oh My Zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"

# Old Colorscheme - Previous Scheme
# POWERLEVEL9K_MODE="nerdfont-complete"
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context dir newline status)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(vcs)
# POWERLEVEL9K_SHOW_CHANGESET=true
# POWERLEVEL9K_SHORTEN_DIR_LENGTH=1

# Modus Light Colorscheme (Commented)
# POWERLEVEL9K_MODE="nerdfont-complete"
# POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context dir newline status)
# POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(vcs)
# POWERLEVEL9K_SHOW_CHANGESET=true
# POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
# POWERLEVEL9K_COLOR_SCHEME="light"

# Modus Dark Colorscheme (Active)
POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context dir newline status)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(vcs virtualenv)
POWERLEVEL9K_SHOW_CHANGESET=true
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_COLOR_SCHEME="dark"

source ~/applications/powerlevel10k/powerlevel10k.zsh-theme

# Plugins
plugins=(
  git
  virtualenv
  zsh-syntax-highlighting
  zsh-autosuggestions
)
source $ZSH/oh-my-zsh.sh

# Environment variables
export PATH="$PATH:/home/jitesh/riscv/bin"
# export PATH="$PATH:/home/jitesh/riscv_binaries/ubuntu-toolchain-az/riscv_toolchain_ubuntu/bin"
# export PATH="$PATH:/home/jitesh/Desktop/work/incore/misc/bsc/bsc_install/bin"
export PATH="$PATH:/home/jitesh/Desktop/work/incore/misc/incore_bsv/bsc/bsc-main/inst/bin"
export PATH="$PATH:/usr/bin/iverilog"
export PATH="$PATH:/home/jitesh/binaries"
export PATH="$PATH:/usr/bin/verilator"
export PATH="$PATH:/usr/local/bin/ctags"
export PATH="$PATH:/opt/nvim-linux64/bin"
export PATH="$PATH:/home/jitesh/.local/bin"
export PATH="$PATH:/home/jitesh/applications/MentorGraphics_QuestaSim/install/questasim/linux_x86_64"
export LM_LICENSE_FILE="/home/jitesh/applications/MentorGraphics_QuestaSim/install/license.dat"

# Vim mode in Zsh
bindkey -v
export KEYTIMEOUT=1

# Zoxide initialization
# eval "$(zoxide init zsh)"
# Initialize fasd
eval "$(fasd --init auto)"

# Key bindings
zle -N accept-current-completion
bindkey '^l' autosuggest-accept
# fuzzy file search 

# Aliases
# tmux
alias tn='tmux -u  new -s'
alias tls='tmux -u ls'
alias ta='tmux -u attach -t'
alias tk='tmux -u kill-session -t'
alias t='tmux -u'
# virtual Environment
export pyvirtualenv=~/pyvirtualenv
# Create a virtual environment
makevenv() {
    python3 -m venv "$pyvirtualenv/$1"
    echo "Virtual environment '$1' created at $pyvirtualenv/$1"
}

# Activate a virtual environment
activate() {
    if [ ! -d "$pyvirtualenv/$1" ]; then
        echo "Error: Virtual environment '$1' does not exist."
        return 1
    fi
source "$pyvirtualenv/$1/bin/activate"
}

# Remove a virtual environment
rmvenv() {
    if [ ! -d "$pyvirtualenv/$1" ]; then
        echo "Error: Virtual environment '$1' does not exist."
        return 1
    fi
    rm -rf "$pyvirtualenv/$1"
    echo "Virtual environment '$1' removed."
}
# List all virtual environments
alias lsvenv="ls -1 $pyvirtualenv"

# basic stuff
alias sl="ls"
alias gs="git status"
alias gc="git commit"
alias ga="git add ."
alias gp="git push origin main"
alias v="nvim"
alias py="python3"
alias c="clear"
alias scratchpad="nvim ~/scratchpad"
alias rm="rm -ir"
alias llm="python3 ~/scripts/llm.py"
alias copy="xclip -sel clip"
alias displaymanager="sudo vim /etc/gdm3/custom.conf"
alias config_update="~/update.sh"
alias lg="lazygit"

# conda setup
alias condasetup='source ~/miniconda3/etc/profile.d/conda.sh && conda activate base'




# Conditional prompt customization
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# vi mode
bindkey -v
export KEYTIMEOUT=1

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.




